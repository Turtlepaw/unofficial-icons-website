@page "/"
@page "/index"
@page "/index.html"
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@inject IModalService modal

<div class="text-center text-black main-page">
    <div class="pb-12 top">
        <NavMenu/>
        <div id="main" name="main" class="mt-10 text-white">
            <h1 class="text-6xl font-bold align-middle">Icons Discord</h1>
            <p class="font-normal text-lg">Welcome to Icons, where we have one of the best minimalistic, handcrafted, and beautiful Icons. We are known as the best source for icons & emotes on Discord.</p>
            <h1 class="text-6xl opacity-20 transform -translate-y-5 font-bold mb-2 align-middle">
                <span class="opacity-0">.</span>
            </h1>
        </div>
    </div>
    <div class="flexlist">
        @if (images != null)
        {
            @foreach (var img in images)
            {
                <div class="flexitem" @onclick="@(() => ShowPopup(img.name, img.type))">
                    <center><img src="img/@(img.name + "." + img.type.ToLowerInvariant())" style="width: 60px;"/></center>
                    <div class="IconListText">@img.name</div>
                </div>
            }
        } else
        {
            <div class="spinner">
                <div class="cube1"></div>
                <div class="cube2"></div>
            </div>
        }

    </div>
    
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    void ShowPopup(string name, string type)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Icon.name), name);
        parameters.Add(nameof(Icon.type), type);
        var Options = new ModalOptions()
        {
            Class = "blazorModel"
        };

        Modal.Show<Icon>("", parameters, Options);
    }

    private ImgFile[] images { get; set; } = { };

    public record ImgFile
    {
        public string name { get; set; }
        public string type { get; set; }
    }

    private async Task GetFilesStartUp()
    {
        images = (await Http.GetFromJsonAsync<ImgFile[]>("img/data.json")).Where(i => i.type.ToLowerInvariant().EndsWith("png")).ToArray();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFilesStartUp();
    }
}